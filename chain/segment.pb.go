// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/inca-go/chain/segment.proto

package chain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import storageref "github.com/aperturerobotics/storageref"
import inca "github.com/aperturerobotics/inca"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SegmentStatus is the status of a segment.
type SegmentStatus int32

const (
	// INVALID indicates the segment has been shown to be invalid.
	SegmentStatus_SegmentStatus_INVALID SegmentStatus = 0
	// DISJOINTED indicates the segment has not been connected to any trusted chain yet.
	SegmentStatus_SegmentStatus_DISJOINTED SegmentStatus = 1
	// VALID indicates the segment has been shown to be valid.
	SegmentStatus_SegmentStatus_VALID SegmentStatus = 2
)

var SegmentStatus_name = map[int32]string{
	0: "SegmentStatus_INVALID",
	1: "SegmentStatus_DISJOINTED",
	2: "SegmentStatus_VALID",
}
var SegmentStatus_value = map[string]int32{
	"SegmentStatus_INVALID":    0,
	"SegmentStatus_DISJOINTED": 1,
	"SegmentStatus_VALID":      2,
}

func (x SegmentStatus) String() string {
	return proto.EnumName(SegmentStatus_name, int32(x))
}
func (SegmentStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// SegmentState tracks state of a Segment.
type SegmentState struct {
	// Id is the identifier of the segment.
	// Usually a UUID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Status is the status of the segment.
	Status SegmentStatus `protobuf:"varint,2,opt,name=status,enum=chain.SegmentStatus" json:"status,omitempty"`
	// HeadBlock is a reference to the HEAD of this segment.
	HeadBlock *storageref.StorageRef `protobuf:"bytes,3,opt,name=head_block,json=headBlock" json:"head_block,omitempty"`
	// TailBlock is a reference to the TAIL of this segment.
	TailBlock *storageref.StorageRef `protobuf:"bytes,4,opt,name=tail_block,json=tailBlock" json:"tail_block,omitempty"`
	// SegmentPrev is the previous segment.
	SegmentPrev string `protobuf:"bytes,5,opt,name=segment_prev,json=segmentPrev" json:"segment_prev,omitempty"`
	// SegmentNext is the next segment.
	SegmentNext string `protobuf:"bytes,6,opt,name=segment_next,json=segmentNext" json:"segment_next,omitempty"`
	// TailBlockRound is the block round info of the tail.
	TailBlockRound *inca.BlockRoundInfo `protobuf:"bytes,7,opt,name=tail_block_round,json=tailBlockRound" json:"tail_block_round,omitempty"`
}

func (m *SegmentState) Reset()                    { *m = SegmentState{} }
func (m *SegmentState) String() string            { return proto.CompactTextString(m) }
func (*SegmentState) ProtoMessage()               {}
func (*SegmentState) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SegmentState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SegmentState) GetStatus() SegmentStatus {
	if m != nil {
		return m.Status
	}
	return SegmentStatus_SegmentStatus_INVALID
}

func (m *SegmentState) GetHeadBlock() *storageref.StorageRef {
	if m != nil {
		return m.HeadBlock
	}
	return nil
}

func (m *SegmentState) GetTailBlock() *storageref.StorageRef {
	if m != nil {
		return m.TailBlock
	}
	return nil
}

func (m *SegmentState) GetSegmentPrev() string {
	if m != nil {
		return m.SegmentPrev
	}
	return ""
}

func (m *SegmentState) GetSegmentNext() string {
	if m != nil {
		return m.SegmentNext
	}
	return ""
}

func (m *SegmentState) GetTailBlockRound() *inca.BlockRoundInfo {
	if m != nil {
		return m.TailBlockRound
	}
	return nil
}

func init() {
	proto.RegisterType((*SegmentState)(nil), "chain.SegmentState")
	proto.RegisterEnum("chain.SegmentStatus", SegmentStatus_name, SegmentStatus_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/inca-go/chain/segment.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0xb4, 0x95, 0x6e, 0x6b, 0x29, 0x6b, 0xd5, 0xb5, 0x78, 0xa8, 0x9e, 0x8a, 0x7f,
	0x12, 0xa8, 0x88, 0x37, 0x41, 0xa9, 0x87, 0x88, 0x54, 0x49, 0xc4, 0x6b, 0xd8, 0x24, 0xd3, 0x74,
	0xb1, 0xcd, 0x96, 0xcd, 0xa4, 0xf4, 0xe3, 0xf9, 0xd1, 0x24, 0x9b, 0xa0, 0xc9, 0xa5, 0x5e, 0x96,
	0xe1, 0xcd, 0xfb, 0xf1, 0x1e, 0xb3, 0xe4, 0x3e, 0x16, 0x38, 0xcf, 0x02, 0x2b, 0x94, 0x4b, 0x9b,
	0xaf, 0x40, 0x61, 0xa6, 0x40, 0xc9, 0x40, 0xa2, 0x08, 0x53, 0x5b, 0x24, 0x21, 0xbf, 0x89, 0xa5,
	0x1d, 0xce, 0xb9, 0x48, 0xec, 0x14, 0xe2, 0x25, 0x24, 0x68, 0xad, 0x94, 0x44, 0x49, 0x1b, 0x5a,
	0x1c, 0x6c, 0xe5, 0x53, 0x94, 0x8a, 0xc7, 0xa0, 0x60, 0x56, 0x19, 0x0b, 0x7e, 0x70, 0xf5, 0x5f,
	0xb0, 0x7e, 0x0a, 0xf3, 0xc5, 0xb7, 0x49, 0x3a, 0x5e, 0x11, 0xef, 0x21, 0x47, 0xa0, 0x5d, 0x62,
	0x8a, 0x88, 0x19, 0x43, 0x63, 0xd4, 0x72, 0x4d, 0x11, 0xd1, 0x6b, 0xd2, 0x4c, 0x91, 0x63, 0x96,
	0x32, 0x73, 0x68, 0x8c, 0xba, 0xe3, 0xbe, 0xa5, 0xeb, 0x59, 0x15, 0x28, 0x4b, 0xdd, 0xd2, 0x43,
	0xef, 0x08, 0x99, 0x03, 0x8f, 0xfc, 0x60, 0x21, 0xc3, 0x2f, 0xb6, 0x3b, 0x34, 0x46, 0xed, 0xf1,
	0xb1, 0x55, 0xa9, 0xe8, 0x15, 0xa3, 0x0b, 0x33, 0xb7, 0x95, 0x3b, 0x9f, 0x72, 0x63, 0x8e, 0x21,
	0x17, 0x8b, 0x12, 0xdb, 0xdb, 0x8e, 0xe5, 0xce, 0x02, 0x3b, 0x27, 0x9d, 0xf2, 0x74, 0xfe, 0x4a,
	0xc1, 0x9a, 0x35, 0x74, 0xeb, 0x76, 0xa9, 0xbd, 0x2b, 0x58, 0x57, 0x2d, 0x09, 0x6c, 0x90, 0x35,
	0x6b, 0x96, 0x29, 0x6c, 0x90, 0x3e, 0x90, 0xde, 0x5f, 0xb8, 0xaf, 0x64, 0x96, 0x44, 0x6c, 0x5f,
	0x57, 0xe8, 0x5b, 0xfa, 0x52, 0x3a, 0xcc, 0xcd, 0x75, 0x27, 0x99, 0x49, 0xb7, 0xfb, 0x5b, 0x40,
	0x6b, 0x97, 0x9c, 0x1c, 0xd4, 0x8e, 0x41, 0x4f, 0xc9, 0x51, 0x4d, 0xf0, 0x9d, 0xe9, 0xe7, 0xe3,
	0xab, 0x33, 0xe9, 0xed, 0xd0, 0x33, 0xc2, 0xea, 0xab, 0x89, 0xe3, 0xbd, 0xbc, 0x39, 0xd3, 0x8f,
	0xe7, 0x49, 0xcf, 0xa0, 0x27, 0xe4, 0xb0, 0xbe, 0x2d, 0x30, 0x33, 0x68, 0xea, 0xcf, 0xba, 0xfd,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x50, 0xe6, 0x4f, 0x54, 0x02, 0x00, 0x00,
}
